<?php if ( ! defined( 'DEVIL_SYS_CORE_PATH' ) ) exit( 'No direct script access allowed' );
/**
  @brief        使用純真IP資料庫來判斷IP所在位置，需搭配純真IP資料庫。
  @version      1.0.0
  @date         2015-02-27
  @since        1.0.0 -> 新增此新類別。
  @remarks      純真IP版本為 2016-03-25 更新。\n
                此類別需手動掛載：
  @code{.unparsed}
  $this->Core_Loader->library( 'IpLocation' );
  @endcode
**/

class IpLocation
{
    /**
    @brief      QQWry.Dat文件指針 | 類型：resource
    **/
    public $fp;

    /**
    @brief      第一條IP記錄的偏移地址 | 類型：int
    **/
    public $firstip;

    /**
    @brief      最後一條IP記錄的偏移地址 | 類型：int
    **/
    public $lastip;

    /**
    @brief      IP記錄的總條數（不包含版本信息記錄） | 類型：int
    **/
    public $totalip;

    /**
    @cond       建構子
    @remarks    打開 QQWry.Dat 文件並初始化類中的信息
    **/
    public function __construct( $filename = DEVIL_SYS_CORE_QQWRY_PATH )
    {
        # ----------------------------------------------------------------------
        # 初始化變數
        # ----------------------------------------------------------------------
        $this->fp = 0;
        # ----------------------------------------------------------------------
        # ....
        # ----------------------------------------------------------------------
        if ( ( $this->fp = @fopen( $filename, 'rb' ) ) !== false )
        {
            $this->firstip = $this->getlong();
            $this->lastip = $this->getlong();
            $this->totalip = ( $this->lastip - $this->firstip ) / 7;
            # ------------------------------------------------------------------
            # 註冊析構函數，使其在程序執行結束時執行
            # ------------------------------------------------------------------
            register_shutdown_function( array( &$this , '__destruct' ) );
        }
        else
        {
            show_error( '載入錯誤' );
        }
    }
    /**
    @endcond
    **/

    /**
    @cond       解構子，用於在頁面執行結束後自動關閉打開的文件。
    **/
    public function __destruct()
    {
        if ( $this->fp )
        {
            fclose( $this->fp );
        }
        $this->fp = 0;
    }
    /**
    @endcond
    **/

    /**
    @brief      返回讀取的長整型數
    @return     Int
    **/
    private function getlong()
    {
        # ----------------------------------------------------------------------
        # 將讀取的little-endian編碼的4個字節轉化為長整型數
        # ----------------------------------------------------------------------
        $result = unpack( 'Vlong' , fread( $this->fp , 4 ) );
        return $result['long'];
    }

    /**
    @brief      返回讀取的3個字節的長整型數
    @return     Int
    **/
    private function getlong3()
    {
    # ----------------------------------------------------------------------
    # 將讀取的little-endian編碼的3個字節轉化為長整型數
    # ----------------------------------------------------------------------
    $result = unpack( 'Vlong' , fread( $this->fp , 3 ) . chr( 0 ) );
    return $result['long'];
    }

    /**
    @brief      返回壓縮後可進行比較的IP地址
    @param      String      $ip
    @return     String
    **/
    private function packip( $ip )
    {
        # ----------------------------------------------------------------------
        # 將IP地址轉化為長整型數，如果在PHP5中，IP地址錯誤，則返回false，
        # 這時intval將Flase轉化為整數-1，之後壓縮成big-endian編碼的字符串
        # ----------------------------------------------------------------------
        return pack( 'N' , intval( ip2long( $ip ) ) );
    }

    /**
    @brief      返回讀取的字符串
    @param      String      $data
    @return     String
    **/
  	private function getstring( $data = "" )
  	{
        $char = fread( $this->fp , 1 );
        # ----------------------------------------------------------------------
        # 字符串按照C格式保存，以\0結束
        # ----------------------------------------------------------------------
        while ( ord( $char ) > 0 )
        {
            # ------------------------------------------------------------------
            # 將讀取的字符連接到給定字符串之後
            # ------------------------------------------------------------------
            $data .= $char;
            $char = fread( $this->fp , 1 );
        }

        return $data;
  	}

    /**
    @brief      返回地區內容
    @return     String
    **/
    private function getarea()
    {
        # ----------------------------------------------------------------------
        # 標誌字節
        # ----------------------------------------------------------------------
        $byte = fread( $this->fp , 1 );
        switch ( ord( $byte ) )
        {
            # ------------------------------------------------------------------
            # 沒有區域信息
            # ------------------------------------------------------------------
            case 0:
                $area = "";
                break;
            # ------------------------------------------------------------------
            # 標誌字節為1或2，表示區域信息被重定向
            # ------------------------------------------------------------------
            case 1:
            case 2:
                fseek( $this->fp , $this->getlong3() );
                $area = $this->getstring();
                break;
            # ------------------------------------------------------------------
            # 否則，表示區域信息沒有被重定向
            # ------------------------------------------------------------------
            default:
                $area = $this->getstring( $byte );
                break;
        }

        return $area;
    }

    /**
    @brief      返回地區信息
    @param      String      $ip
    @return     Array
    @remarks    此範例返回：
    @code{.unparsed}
    Array
    (
        [ip] => 127.0.0.1
        [beginip] => 127.0.0.0
        [endip] => 127.255.255.255
        [country] => IANA
        [area] => 保留地址用于本地回送
    )
    @endcode
    @code{.unparsed}
    $this->Core_IpLocation->getlocation( '127.0.0.1' );
    @endcode
    **/
    public function getlocation( $ip )
    {
        # ----------------------------------------------------------------------
        # 如果數據文件沒有被正確打開，則直接返回空
        # ----------------------------------------------------------------------
        if ( ! $this->fp )  return null;
        # ----------------------------------------------------------------------
        # 將輸入的域名轉化為IP地址
        # ----------------------------------------------------------------------
        $location['ip'] = gethostbyname( $ip );
        # ----------------------------------------------------------------------
        # 將輸入的IP地址轉化為可比較的IP地址
        # ----------------------------------------------------------------------
        $ip = $this->packip( $location['ip'] );
        # ----------------------------------------------------------------------
        # 不合法的IP地址會被轉化為255.255.255.255
        # 對分搜索
        # 搜索的下邊界
        # ----------------------------------------------------------------------
        $l = 0;
        # ----------------------------------------------------------------------
        # 搜索的上邊界
        # ----------------------------------------------------------------------
        $u = $this->totalip;
        # ----------------------------------------------------------------------
        # 如果沒有找到就返回最後一條IP記錄（QQWry.Dat的版本信息）
        # ----------------------------------------------------------------------
        $findip = $this->lastip;
        # ----------------------------------------------------------------------
        # 當上邊界小於下邊界時，查找失敗
        # ----------------------------------------------------------------------
        while ( $l <= $u )
        {
            # ------------------------------------------------------------------
            # 計算近似中間記錄
            # ------------------------------------------------------------------
            $i = floor( ( $l + $u ) / 2 );
            fseek( $this->fp , $this->firstip + $i * 7 );
            # ------------------------------------------------------------------
            # 獲取中間記錄的開始IP地址
            # ------------------------------------------------------------------
            $beginip = strrev( fread( $this->fp, 4 ) );
            # ------------------------------------------------------------------
            # strrev函數在這裡的作用是將little-endian的壓縮IP地址轉化為big-endian的格式
            # 以便用於比較，後面相同。
            # 用戶的IP小於中間記錄的開始IP地址時
            # ------------------------------------------------------------------
            if ( $ip < $beginip )
            {
                # --------------------------------------------------------------
                # 將搜索的上邊界修改為中間記錄減一
                # --------------------------------------------------------------
                $u = $i - 1;
            }
            else
            {
                fseek( $this->fp , $this->getlong3() );
                # --------------------------------------------------------------
                # 獲取中間記錄的結束IP地址
                # --------------------------------------------------------------
                $endip = strrev( fread( $this->fp , 4 ) );
                # --------------------------------------------------------------
                # 用戶的IP大於中間記錄的結束IP地址時
                # --------------------------------------------------------------
                if ( $ip > $endip )
                {
                    # ----------------------------------------------------------
                    # 將搜索的下邊界修改為中間記錄加一
                    # ----------------------------------------------------------
                    $l = $i + 1;
                }
                # --------------------------------------------------------------
                # 用戶的IP在中間記錄的IP範圍內時
                # --------------------------------------------------------------
                else
                {
                    $findip = $this->firstip + $i * 7;
                    # ----------------------------------------------------------
                    # 則表示找到結果，退出循環
                    # ----------------------------------------------------------
                    break;
                }
            }
        }
        # ----------------------------------------------------------------------
        # 獲取查找到的IP地理位置信息
        # ----------------------------------------------------------------------
        fseek( $this->fp, $findip );
        # ----------------------------------------------------------------------
        # 用戶IP所在範圍的開始地址
        # ----------------------------------------------------------------------
        $location['beginip'] = long2ip( $this->getlong() );
        $offset = $this->getlong3();
        fseek( $this->fp , $offset );
        # ----------------------------------------------------------------------
        # 用戶IP所在範圍的結束地址
        # ----------------------------------------------------------------------
        $location['endip'] = long2ip( $this->getlong() );
        # ----------------------------------------------------------------------
        # 標誌字節
        # ----------------------------------------------------------------------
        $byte = fread( $this->fp , 1 );
        switch ( ord( $byte ) )
        {
            # ------------------------------------------------------------------
            # 標誌字節為1，表示國家和區域信息都被同時重定向
            # ------------------------------------------------------------------
            case 1:
                # --------------------------------------------------------------
                # 重定向地址
                # --------------------------------------------------------------
                $countryOffset = $this->getlong3();
                fseek( $this->fp , $countryOffset );
                # --------------------------------------------------------------
                # 標誌字節
                # --------------------------------------------------------------
                $byte = fread( $this->fp , 1 );
                switch ( ord( $byte ) )
                {
                # ----------------------------------------------------------
                # 標誌字節為2，表示國家信息又被重定向
                # ----------------------------------------------------------
                case 2:
                    fseek( $this->fp , $this->getlong3() );
                    $location['country'] = iconv( 'GB2312' , 'UTF-8//IGNORE' , $this->getstring() );
                    fseek( $this->fp , $countryOffset + 4 );
                    $location['area'] = iconv( 'GB2312' , 'UTF-8//IGNORE' , $this->getarea() );
                    break;
                # ----------------------------------------------------------
                # 否則，表示國家信息沒有被重定向
                # ----------------------------------------------------------
                default:
                    $location['country'] = iconv( 'GB2312' , 'UTF-8//IGNORE' , $this->getstring($byte) );
                    $location['area'] = iconv( 'GB2312' , 'UTF-8//IGNORE' , $this->getarea() );
                    break;
                }
                break;
                # ------------------------------------------------------------------
                # 標誌字節為2，表示國家信息被重定向
                # ------------------------------------------------------------------
                case 2:
                    fseek( $this->fp, $this->getlong3() );
                    $location['country'] = iconv( 'GB2312' , 'UTF-8//IGNORE' , $this->getstring() );
                    fseek($this->fp, $offset + 8 );
                    $location['area'] = iconv( 'GB2312' , 'UTF-8//IGNORE' , $this->getarea() );
                    break;
                # ------------------------------------------------------------------
                # 否則，表示國家信息沒有被重定向
                # ------------------------------------------------------------------
                default:
                    $location['country'] = iconv( 'GB2312' , 'UTF-8//IGNORE' , $this->getstring( $byte ) );
                    $location['area'] = iconv( 'GB2312' , 'UTF-8//IGNORE' , $this->getarea() );
                    break;
        }
        # ------------------------------------------------------------------
        # CZ88.NET表示沒有有效信息
        # ------------------------------------------------------------------
        if ( $location['country'] == " CZ88.NET" )
        {
            $location['country'] = "未知";
        }
        if ( $location['area'] == " CZ88.NET" )
        {
            $location['area'] = "";
        }

        return $location;
    }
}