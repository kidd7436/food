<?php if ( ! defined( 'DEVIL_SYS_CORE_PATH' ) ) exit( 'No direct script access allowed' );
/**
  @brief        可產生靜態檔案加速資料的存取。
  @version      1.0.0
  @date         2015-04-16
  @since        1.0.0 -> 新增此新類別。
  @attention    注意: 此類別由系統自動初始化所以不需要手動載入。
**/

class Cache
{
    /**
    @brief      Cache 目錄
    **/
    private $cache_dir = null;

    /**
    @brief      Cache 檔案前綴
    **/
    private $cache_prefix = null;

    /**
    @brief      Cache 時間
    **/
    private $cache_time = null;

    /**
    @brief      Cache 模式
    **/
    private $cache_mode = null;

    /**
    @brief      初始化
    @param      String      $cache_dir 緩存存放的目錄
    @param      String      $cache_prefix 緩存前贅詞
    @param      Int         $cache_time 緩存時間
    @param      Int         $cache_mod 緩存模式
    @remarks    範例如下：
    @code{.unparsed}
    $this->Core_Cache->flushCache( 'cache' , 'cache_' , 1800 , 1 );
    @endcode
    **/
    public function init( $cache_dir = 'cache' , $cache_prefix = 'cache_' , $cache_time = 1800 , $cache_mod = 1 )
    {
        # ----------------------------------------------------------------------
        # 將傳入的 "緩存存放的目錄" 設定值存放至變數中
        # ----------------------------------------------------------------------
        $this->cache_dir = DEVIL_APP_PATH . DIRECTORY_SEPARATOR . $cache_dir;
        # ----------------------------------------------------------------------
        # 將傳入的 "緩存前贅詞" 設定值存放至變數中
        # ----------------------------------------------------------------------
        $this->cache_prefix = $cache_prefix;
        # ----------------------------------------------------------------------
        # 將傳入的 "緩存時間" 設定值存放至變數中
        # ----------------------------------------------------------------------
        $this->cache_time = $cache_time;
        # ----------------------------------------------------------------------
        # 將傳入的 "緩存模式" 設定值存放至變數中
        # ----------------------------------------------------------------------
        $this->cache_mode = $cache_mod;
    }

    /**
    @brief      設置 Cache 的暫存資料
    @param      String      $id 緩存名稱
    @param      Array       $data 緩存內容
    @remarks    範例如下：
    @code{.unparsed}
    $this->Core_Cache->set( 'My_Simple' , 'this is testing...' );
    @endcode
    **/
    public function set( $id , $data = array() )
    {
        # ----------------------------------------------------------------------
        # 如果沒有指定 id ，就直接顯示錯誤
        # ----------------------------------------------------------------------
        if ( ! isset( $id ) )
        {
            return false;
        }
        # ----------------------------------------------------------------------
        # 在這裡組合 cache 的內容資料
        # ----------------------------------------------------------------------
        $cache = array
        (
            'file'  =>  $this->getFileName( $id , $this->cache_dir ),
            'data'  =>  $data
        );
        # ----------------------------------------------------------------------
        # 回傳寫入結果
        # ----------------------------------------------------------------------
        return $this->writeCache( $cache );
    }

    /**
    @brief      取得 Cache 的暫存資料
    @param      String      $id 緩存名稱
    @retval     Boolen / Array
    @remarks    範例如下：
    @code{.unparsed}
    $this->Core_Cache->get( 'My_Simple' );
    @endcode
    **/
    public function get( $id )
    {
        # ----------------------------------------------------------------------
        # 如果指定的 id 不存在 ，就直接顯示錯誤
        # ----------------------------------------------------------------------
        if ( ! $this->hasCache( $id ) )
        {
            return false;
        }
        # ----------------------------------------------------------------------
        # 回傳取得的緩存資料
        # ----------------------------------------------------------------------
        return $this->getCacheData( $id );
    }

    /**
    @brief      刪除指定的一筆 Cache
    @param      String      $id 緩存名
    @return     Boolen
    @remarks    範例如下：
    @code{.unparsed}
    $this->Core_Cache->del( 'My_Simple' );
    @endcode
    **/
    public function del( $id )
    {
        # ----------------------------------------------------------------------
        # 如果緩存檔案有存在，就刪除
        # ----------------------------------------------------------------------
        if ( $this->hasCache( $id ) )
        {
            return unlink( $this->getFileName( $id ) );
        }
        else
        {
            trigger_error( 'Cache不存在' );
        }
    }

    /**
    @brief      取得 Cache 的目錄
    @return     String
    **/
    private function getCacheDir()
    {
        # ----------------------------------------------------------------------
        # Cache 的目錄
        # ----------------------------------------------------------------------
        return $cache_dir = trim( $this->cache_dir , DIRECTORY_SEPARATOR );
    }

    /**
    @brief      取得完整的 Cache 文件名稱
    @param      String      $id 緩存名
    @retval     String
    **/
    private function getFileName( $id )
    {
        # ----------------------------------------------------------------------
        # 取出 Cache 目錄中指定前贅詞的緩存文件名稱
        # ----------------------------------------------------------------------
        return $this->getCacheDir() . DIRECTORY_SEPARATOR . $this->cache_prefix . $id . '.php';
    }

    /**
    @brief      根據Cache 文件，取得Cache名稱
    @param      Strinf      $file Type
    **/
    private function getCacheName( $file )
    {
        # ----------------------------------------------------------------------
        # 如果檔案不存在，就回傳 false
        # ----------------------------------------------------------------------
        if ( ! file_exists( $file ) )
        {
            return false;
        }
        # ----------------------------------------------------------------------
        # 返回路径中的部分文件名稱
        # ----------------------------------------------------------------------
        $filename = basename( $file );
        # ----------------------------------------------------------------------
        # 正規化取出文件名
        # ----------------------------------------------------------------------
        preg_match( '/^' . $this->cache_prefix . '(.*).php$/i' , $filename , $matches );
        # ----------------------------------------------------------------------
        # 回傳正規化後結果
        # ----------------------------------------------------------------------
        return $matches[1];
    }

    /**
    @brief      寫入 Cache
    @param      Array       $cache 緩存數據
    **/
    private function writeCache( $cache = array() )
    {
        # ----------------------------------------------------------------------
        # 如果專案下的 Cache 目錄不存在，就建立
        # ----------------------------------------------------------------------
        if ( ! is_dir( $this->getCacheDir() ) )
        {
            mkdir( $this->getCacheDir() , 0777 );
        }
        # ----------------------------------------------------------------------
        # 如果專案下的 Cache 目錄存在就檢查可否寫入檔案，若不可寫入就改變目錄權限
        # ----------------------------------------------------------------------
        elseif( ! is_writable( $this->getCacheDir() ) )
        {
            chmod( $this->getCacheDir() , 0777 );
        }
        # ----------------------------------------------------------------------
        # 如果緩存模式為 1
        # ----------------------------------------------------------------------
        if ( $this->cache_mode == 1 )
        {
            # ------------------------------------------------------------------
            # 使用序列化的方式將陣列、物件的資料寫入
            # ------------------------------------------------------------------
            $content = serialize( $cache['data'] );
        }
        # ----------------------------------------------------------------------
        # 儲存為 .php 檔案
        # ----------------------------------------------------------------------
        else
        {
            $content  = "<?php\n" .
                       " return " .
                       # -------------------------------------------------------
                       # 输出或返回一个变量的字符串表示(合法的php表示)
                       # -------------------------------------------------------
                       var_export( $cache['data'] , true ) .
                       ";\n";
        }
        # ----------------------------------------------------------------------
        # 使用写入方式打开，将文件指针指向文件头并将文件大小截为零。
        # 如果文件不存在则尝试创建之。
        # ----------------------------------------------------------------------
        if ( $fp = fopen( $cache['file'] , 'w' ) )
        {
            # ------------------------------------------------------------------
            # 要取得独占锁定（写入的程序）
            # ------------------------------------------------------------------
            flock( $fp , LOCK_EX );
            # ------------------------------------------------------------------
            # 顯示寫入失敗
            # ------------------------------------------------------------------
            if ( fwrite( $fp , $content ) === false )
            {
                trigger_error( '寫入Cache失敗' );
            }
            # ------------------------------------------------------------------
            # 要释放锁定（无论共享或独占）
            # ------------------------------------------------------------------
            flock( $fp , LOCK_UN );
            # ------------------------------------------------------------------
            # 關閉資料流
            # ------------------------------------------------------------------
            fclose( $fp );
            # ------------------------------------------------------------------
            # 修改產生的緩存檔案為 0777
            # ------------------------------------------------------------------
            chmod( $cache['file'] , 0777 );
            # ------------------------------------------------------------------
            # 回傳
            # ------------------------------------------------------------------
            return true;
        }
        else
        {
            # ------------------------------------------------------------------
            # 目錄不存在顯示錯誤
            # ------------------------------------------------------------------
            trigger_error( 'open the ' . $cache['file'] . ' error！' );
            # ------------------------------------------------------------------
            # 回傳
            # ------------------------------------------------------------------
            return false;
        }
    }

    /**
    @brief      判斷 Cache 是否存在
    @param      String      $id 緩存名
    @return     Boolen
    **/
    private function hasCache( $id )
    {
        # ----------------------------------------------------------------------
        # 檢查前刪除過期的緩存
        # ----------------------------------------------------------------------
        if ( file_exists( $this->getFileName( $id ) ) )
        {
            # ------------------------------------------------------------------
            # 如果當前時間大於 檔案最後修改時間 + 緩存時間的話，就刪除檔案
            # ------------------------------------------------------------------
            if ( time() > filemtime( $this->getFileName( $id ) ) + $this->cache_time )
            {
                unlink( $this->getFileName( $id ) );
            }
        }
        # ----------------------------------------------------------------------
        # 回傳
        # ----------------------------------------------------------------------
        return file_exists( $this->getFileName( $id ) ) ?  true :  false;
    }

    /**
    @brief      取得 Cache 資料數據
    @param      String      $id 緩存名
    @return     Array
    **/
    private function getCacheData( $id )
    {
        # ----------------------------------------------------------------------
        # 如果緩存檔案不存在，就返回錯誤
        # ----------------------------------------------------------------------
        if ( ! $this->hasCache( $id ) )
        {
            return false;
        }
        # ----------------------------------------------------------------------
        # 如果緩存模式為 1
        # ----------------------------------------------------------------------
        if ( $this->cache_mode == 1 )
        {
            # ------------------------------------------------------------------
            # 只读方式打开，将文件指针指向文件头。
            # ------------------------------------------------------------------
            $fp = fopen( $this->getFileName( $id ) , 'r' );
            # ------------------------------------------------------------------
            # 读取打开的文件，依照實際返回的文件大小
            # ------------------------------------------------------------------
            $data = fread( $fp , filesize( $this->getFileName( $id ) ) );
            # ------------------------------------------------------------------
            # 關閉資料流
            # ------------------------------------------------------------------
            fclose( $fp );
            # ------------------------------------------------------------------
            # 使用反序列方式反解內容
            # ------------------------------------------------------------------
            return unserialize( $data );
        }
        else
        {
            # ------------------------------------------------------------------
            # 引入檔案並回傳內容
            # ------------------------------------------------------------------
            return include $this->getFileName( $id );
        }
    }

    /**
    @brief      清空緩存
    @return     Boolen
    @remarks    範例如下：
    @code{.unparsed}
    $this->Core_Cache->flushCache();
    @endcode
    **/
    public function flushCache()
    {
        # ----------------------------------------------------------------------
        # 取得緩存目錄的內容
        # ----------------------------------------------------------------------
        $glob = glob( $this->getCacheDir() . DIRECTORY_SEPARATOR . $this->cache_prefix . '*' );
        # ----------------------------------------------------------------------
        # 如果取得正確，就取出所有緩存檔案然後逐筆刪除
        # ----------------------------------------------------------------------
        if ( $glob )
        {
            foreach( $glob as $item )
            {
                # --------------------------------------------------------------
                # 取得緩存檔案名稱
                # --------------------------------------------------------------
                $id = $this->getCacheName( $item );
                # --------------------------------------------------------------
                # 刪除指定緩存
                # --------------------------------------------------------------
                $this->del( $id );
            }
        }
        # ----------------------------------------------------------------------
        # 回傳
        # ----------------------------------------------------------------------
        return true;
    }
}